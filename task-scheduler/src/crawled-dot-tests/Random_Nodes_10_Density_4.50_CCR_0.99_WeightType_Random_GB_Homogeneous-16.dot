digraph "Random_Nodes_10_Density_4.50_CCR_0.99_WeightType_Random_GB" {
	graph ["Duplicate states"=0,
		GraphType=Random,
		"Max states in OPEN"=0,
		Modes="120000ms; topo-ordered tasks, ; Pruning: task equivalence, fixed order ready list, ; F-value: ; Optimisation: best schedule length (\
SL) optimisation on equal, ",
		NumberOfTasks=10,
		"Pruned using list schedule length"=1,
		"States removed from OPEN"=0,
		TargetSystem="Homogeneous-16",
		"Time to schedule (ms)"=95,
		"Total idle time"=0,
		"Total schedule length"=274,
		"Total sequential time"=274,
		"Total states created"=2
	];
	0	["Finish time"=8,
		Processor=0,
		"Start time"=0,
		Weight=8];
	1	["Finish time"=32,
		Processor=0,
		"Start time"=8,
		Weight=24];
	0 -> 1	[Weight=4];
	2	["Finish time"=64,
		Processor=0,
		"Start time"=32,
		Weight=32];
	0 -> 2	[Weight=9];
	3	["Finish time"=96,
		Processor=0,
		"Start time"=64,
		Weight=32];
	0 -> 3	[Weight=7];
	4	["Finish time"=135,
		Processor=0,
		"Start time"=96,
		Weight=39];
	0 -> 4	[Weight=5];
	5	["Finish time"=167,
		Processor=0,
		"Start time"=135,
		Weight=32];
	0 -> 5	[Weight=6];
	6	["Finish time"=206,
		Processor=0,
		"Start time"=167,
		Weight=39];
	0 -> 6	[Weight=4];
	7	["Finish time"=222,
		Processor=0,
		"Start time"=206,
		Weight=16];
	0 -> 7	[Weight=5];
	8	["Finish time"=250,
		Processor=0,
		"Start time"=222,
		Weight=28];
	0 -> 8	[Weight=7];
	9	["Finish time"=274,
		Processor=0,
		"Start time"=250,
		Weight=24];
	0 -> 9	[Weight=9];
	1 -> 2	[Weight=3];
	1 -> 3	[Weight=10];
	1 -> 4	[Weight=6];
	1 -> 5	[Weight=8];
	1 -> 6	[Weight=5];
	1 -> 7	[Weight=2];
	1 -> 8	[Weight=2];
	1 -> 9	[Weight=5];
	2 -> 3	[Weight=9];
	2 -> 4	[Weight=7];
	2 -> 5	[Weight=4];
	2 -> 6	[Weight=9];
	2 -> 7	[Weight=6];
	2 -> 8	[Weight=4];
	2 -> 9	[Weight=4];
	3 -> 4	[Weight=7];
	3 -> 5	[Weight=8];
	3 -> 6	[Weight=8];
	3 -> 7	[Weight=4];
	3 -> 8	[Weight=9];
	3 -> 9	[Weight=7];
	4 -> 5	[Weight=8];
	4 -> 6	[Weight=3];
	4 -> 7	[Weight=7];
	4 -> 8	[Weight=3];
	4 -> 9	[Weight=7];
	5 -> 6	[Weight=7];
	5 -> 7	[Weight=10];
	5 -> 8	[Weight=3];
	5 -> 9	[Weight=3];
	6 -> 7	[Weight=7];
	6 -> 8	[Weight=9];
	6 -> 9	[Weight=2];
	7 -> 8	[Weight=8];
	7 -> 9	[Weight=2];
	8 -> 9	[Weight=10];
}
