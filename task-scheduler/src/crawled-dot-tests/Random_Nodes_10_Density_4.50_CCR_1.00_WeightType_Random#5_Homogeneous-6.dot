digraph "Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#5" {
	graph ["Duplicate states"=0,
		GraphType=Random,
		"Max states in OPEN"=0,
		Modes="120000ms; topo-ordered tasks, ; Pruning: task equivalence, fixed order ready list, ; F-value: ; Optimisation: best schedule length (\
SL) optimisation on equal, ",
		NumberOfTasks=10,
		"Pruned using list schedule length"=1,
		"States removed from OPEN"=0,
		TargetSystem="Homogeneous-6",
		"Time to schedule (ms)"=97,
		"Total idle time"=0,
		"Total schedule length"=288,
		"Total sequential time"=288,
		"Total states created"=2
	];
	0	["Finish time"=36,
		Processor=0,
		"Start time"=0,
		Weight=36];
	1	["Finish time"=57,
		Processor=0,
		"Start time"=36,
		Weight=21];
	0 -> 1	[Weight=8];
	2	["Finish time"=72,
		Processor=0,
		"Start time"=57,
		Weight=15];
	0 -> 2	[Weight=5];
	3	["Finish time"=98,
		Processor=0,
		"Start time"=72,
		Weight=26];
	0 -> 3	[Weight=3];
	4	["Finish time"=129,
		Processor=0,
		"Start time"=98,
		Weight=31];
	0 -> 4	[Weight=2];
	5	["Finish time"=160,
		Processor=0,
		"Start time"=129,
		Weight=31];
	0 -> 5	[Weight=5];
	6	["Finish time"=201,
		Processor=0,
		"Start time"=160,
		Weight=41];
	0 -> 6	[Weight=3];
	7	["Finish time"=216,
		Processor=0,
		"Start time"=201,
		Weight=15];
	0 -> 7	[Weight=10];
	8	["Finish time"=262,
		Processor=0,
		"Start time"=216,
		Weight=46];
	0 -> 8	[Weight=10];
	9	["Finish time"=288,
		Processor=0,
		"Start time"=262,
		Weight=26];
	0 -> 9	[Weight=6];
	1 -> 2	[Weight=7];
	1 -> 3	[Weight=4];
	1 -> 4	[Weight=9];
	1 -> 5	[Weight=8];
	1 -> 6	[Weight=8];
	1 -> 7	[Weight=8];
	1 -> 8	[Weight=8];
	1 -> 9	[Weight=3];
	2 -> 3	[Weight=4];
	2 -> 4	[Weight=7];
	2 -> 5	[Weight=7];
	2 -> 6	[Weight=9];
	2 -> 7	[Weight=2];
	2 -> 8	[Weight=8];
	2 -> 9	[Weight=2];
	3 -> 4	[Weight=9];
	3 -> 5	[Weight=4];
	3 -> 6	[Weight=2];
	3 -> 7	[Weight=10];
	3 -> 8	[Weight=3];
	3 -> 9	[Weight=9];
	4 -> 5	[Weight=10];
	4 -> 6	[Weight=8];
	4 -> 7	[Weight=8];
	4 -> 8	[Weight=5];
	4 -> 9	[Weight=8];
	5 -> 6	[Weight=9];
	5 -> 7	[Weight=8];
	5 -> 8	[Weight=9];
	5 -> 9	[Weight=2];
	6 -> 7	[Weight=3];
	6 -> 8	[Weight=10];
	6 -> 9	[Weight=8];
	7 -> 8	[Weight=7];
	7 -> 9	[Weight=2];
	8 -> 9	[Weight=7];
}
