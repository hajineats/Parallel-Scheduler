digraph "Random_Nodes_10_Density_4.50_CCR_1.00_WeightType_Random#2" {
	graph ["Duplicate states"=0,
		GraphType=Random,
		"Max states in OPEN"=0,
		Modes="120000ms; topo-ordered tasks, ; Pruning: task equivalence, fixed order ready list, ; F-value: ; Optimisation: best schedule length (\
SL) optimisation on equal, ",
		NumberOfTasks=10,
		"Pruned using list schedule length"=1,
		"States removed from OPEN"=0,
		TargetSystem="Homogeneous-2",
		"Time to schedule (ms)"=98,
		"Total idle time"=0,
		"Total schedule length"=273,
		"Total sequential time"=273,
		"Total states created"=2
	];
	0	["Finish time"=22,
		Processor=0,
		"Start time"=0,
		Weight=22];
	1	["Finish time"=55,
		Processor=0,
		"Start time"=22,
		Weight=33];
	0 -> 1	[Weight=4];
	2	["Finish time"=105,
		Processor=0,
		"Start time"=55,
		Weight=50];
	0 -> 2	[Weight=10];
	3	["Finish time"=122,
		Processor=0,
		"Start time"=105,
		Weight=17];
	0 -> 3	[Weight=2];
	4	["Finish time"=139,
		Processor=0,
		"Start time"=122,
		Weight=17];
	0 -> 4	[Weight=2];
	5	["Finish time"=150,
		Processor=0,
		"Start time"=139,
		Weight=11];
	0 -> 5	[Weight=9];
	6	["Finish time"=167,
		Processor=0,
		"Start time"=150,
		Weight=17];
	0 -> 6	[Weight=7];
	7	["Finish time"=189,
		Processor=0,
		"Start time"=167,
		Weight=22];
	0 -> 7	[Weight=10];
	8	["Finish time"=217,
		Processor=0,
		"Start time"=189,
		Weight=28];
	0 -> 8	[Weight=8];
	9	["Finish time"=273,
		Processor=0,
		"Start time"=217,
		Weight=56];
	0 -> 9	[Weight=6];
	1 -> 2	[Weight=6];
	1 -> 3	[Weight=3];
	1 -> 4	[Weight=4];
	1 -> 5	[Weight=9];
	1 -> 6	[Weight=6];
	1 -> 7	[Weight=6];
	1 -> 8	[Weight=2];
	1 -> 9	[Weight=2];
	2 -> 3	[Weight=6];
	2 -> 4	[Weight=8];
	2 -> 5	[Weight=7];
	2 -> 6	[Weight=9];
	2 -> 7	[Weight=10];
	2 -> 8	[Weight=2];
	2 -> 9	[Weight=4];
	3 -> 4	[Weight=9];
	3 -> 5	[Weight=4];
	3 -> 6	[Weight=5];
	3 -> 7	[Weight=10];
	3 -> 8	[Weight=3];
	3 -> 9	[Weight=6];
	4 -> 5	[Weight=4];
	4 -> 6	[Weight=10];
	4 -> 7	[Weight=9];
	4 -> 8	[Weight=3];
	4 -> 9	[Weight=4];
	5 -> 6	[Weight=9];
	5 -> 7	[Weight=4];
	5 -> 8	[Weight=8];
	5 -> 9	[Weight=4];
	6 -> 7	[Weight=4];
	6 -> 8	[Weight=10];
	6 -> 9	[Weight=8];
	7 -> 8	[Weight=4];
	7 -> 9	[Weight=7];
	8 -> 9	[Weight=5];
}
